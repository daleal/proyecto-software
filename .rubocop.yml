Rails:
  Enabled: true

AllCops:
  Exclude:
    - 'bin/**/*'
    - 'config/**/*'
    - 'db/**/*'
    - 'lib/**/*'
    - 'log/**/*'
    - 'public/**/*'
    - 'tmp/**/*'
    - 'vendor/**/*'
    - 'config.ru'
    - 'Gemfile'
    - 'Rakefile'
    - !ruby/regexp /old_and_unused\.rb$/  # ??
    - 'app/helpers/*'  # POR AHORA!!
    - 'app/mailers/*'  # POR AHORA!!
    - 'test/**/*'      # POR AHORA!!

Documentation:
  Enabled: false

Layout/EmptyLinesAroundClassBody:
  EnforcedStyle: ending_only

# No space around method parameter definition
Layout/SpaceAroundEqualsInParameterDefault:
  EnforcedStyle: no_space

Layout/SpaceInsideBlockBraces:
  # The space here provides no real gain in readability while consuming
  # horizontal space that could be used for a better parameter name.
  # Also {| differentiates better from a hash than { | does.
  SpaceBeforeBlockParameters: false

Metrics/LineLength:
  Max: 80

# Too short methods lead to extraction of single-use methods, which can make
# the code easier to read (by naming things), but can also clutter the class
Metrics/MethodLength:
  Max: 20

Rails/ActiveRecordAliases:
  Enabled: false

# Let coder put empty method definition in 2 lines instead of 1
Style/EmptyMethod:
  Enabled: false

# Let the coder put code inside ifs
Style/GuardClause:
  Enabled: false

Style/StringLiterals:
  EnforcedStyle: double_quotes

# We do not need to support Ruby 1.9, so this is good to use.
Style/SymbolArray:
  Enabled: true

# Enforcing the names of variables? To single letter ones? Just no.
Style/SingleLineBlockParams:
  Enabled: false

# Shadowing outer local variables with block parameters is often useful
# to not reinvent a new name for the same thing, it highlights the relation
# between the outer variable and the parameter. The cases where it's actually
# confusing are rare, and usually bad for other reasons already, for example
# because the method is too long.
Lint/ShadowingOuterLocalVariable:
  Enabled: false
